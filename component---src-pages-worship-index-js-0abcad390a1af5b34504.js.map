{"version":3,"sources":["webpack:///./src/pages/worship/index.js","webpack:///./src/components/seo/index.js","webpack:///./src/components/nav/about.js"],"names":["WorshipPage","withSubtitle","title","SEO","description","image","article","pathname","useLocation","useStaticQuery","query","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","twitterUsername","seo","url","name","content","property","defaultProps","links","AboutNav"],"mappings":"8FAAA,qEAiFeA,UA5EK,kBAClB,YAAC,IAAD,CAAYC,cAAc,GACxB,YAAC,IAAD,CAAKC,MAAM,wBACX,YAAC,IAAD,MACA,2BACE,oDACA,0ZAQA,6EACA,iCACA,krBAYA,igBASA,oCACA,0cASA,uCACA,+UAOA,iPAKA,uCACA,4GAIA,oCACA,mT,kCCvEN,8DAMMC,EAAM,SAAC,GAA4C,IAA1CD,EAAyC,EAAzCA,MAAOE,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAChCC,EAAaC,wBAAbD,SAGR,EAFiBE,YAAeC,GAAxBC,KASCC,aANPC,EADF,EACEA,aACAC,EAFF,EAEEA,cACAC,EAHF,EAGEA,mBACAC,EAJF,EAIEA,QACAC,EALF,EAKEA,aACAC,EANF,EAMEA,gBAGIC,EAAM,CACVjB,MAAOA,GAASW,EAChBT,YAAaA,GAAeW,EAC5BV,MAAM,GAAIW,GAAUX,GAASY,GAC7BG,IAAI,GAAIJ,EAAUT,GAGpB,OACE,YAAC,IAAD,CAAQL,MAAOiB,EAAIjB,MAAOY,cAAeA,GACvC,oBAAMO,KAAK,cAAcC,QAASH,EAAIf,cACtC,oBAAMiB,KAAK,QAAQC,QAASH,EAAId,QAE/Bc,EAAIC,KAAO,oBAAMG,SAAS,SAASD,QAASH,EAAIC,OAE/Cd,EAAiB,KAAS,oBAAMiB,SAAS,UAAUD,QAAQ,YAE5DH,EAAIjB,OAAS,oBAAMqB,SAAS,WAAWD,QAASH,EAAIjB,QAEpDiB,EAAIf,aACH,oBAAMmB,SAAS,iBAAiBD,QAASH,EAAIf,cAG9Ce,EAAId,OAAS,oBAAMkB,SAAS,WAAWD,QAASH,EAAId,QAErD,oBAAMgB,KAAK,eAAeC,QAAQ,wBAEjCJ,GACC,oBAAMG,KAAK,kBAAkBC,QAASJ,IAGvCC,EAAIjB,OAAS,oBAAMmB,KAAK,gBAAgBC,QAASH,EAAIjB,QAErDiB,EAAIf,aACH,oBAAMiB,KAAK,sBAAsBC,QAASH,EAAIf,cAG/Ce,EAAId,OAAS,oBAAMgB,KAAK,gBAAgBC,QAASH,EAAId,UAK7CF,MASfA,EAAIqB,aAAe,CACjBtB,MAAO,KACPE,YAAa,KACbC,MAAO,KACPC,SAAS,GAGX,IAAMI,EAAK,c,kCC5EX,sCAGMe,EAAQ,CACZ,CAAC,cAAe,UAChB,CAAC,UAAW,YACZ,CAAC,UAAW,YACZ,CAAC,WAAY,aACb,CAAC,aAAc,eACf,CAAC,UAAW,aAKCC,IAFE,kBAAM,YAAC,IAAD,CAAKD,MAAOA","file":"component---src-pages-worship-index-js-0abcad390a1af5b34504.js","sourcesContent":["import React from \"react\";\nimport CoreLayout from \"../../components/coreLayout\";\nimport Nav from \"../../components/nav/about\";\nimport SEO from \"../../components/seo\";\n\nconst WorshipPage = () => (\n  <CoreLayout withSubtitle={false}>\n    <SEO title=\"Meeting for Worship\" />\n    <Nav />\n    <section>\n      <h2>Weekly Meeting for Worship</h2>\n      <p>\n        Traditionally, we have gathered for worship each First Day (Sunday) at\n        11:00am in Riverside Church in New York City. In March 2020, meeting for\n        worship was moved entirely online in response to the COVID-19 pandemic.\n        Today, Friends and attenders meet for in-person worship on the 12th\n        floor of the tower of Riverside Church, where we join in blended worship\n        with those attending online.\n      </p>\n      <p>Our weekly worship adheres to the following pattern:</p>\n      <h3>Worship</h3>\n      <p>\n        Unprogrammed Quaker worship follows from our belief that each of us is\n        capable of a direct, unmediated experience of the Eternal Presence. It\n        is characterized by a deep and expectant silence, during which each\n        worshiper aims to free her/himself from the distractions of daily life.\n        This “centering down” allows us to be more fully alive to the Spirit.\n        Occasionally, out of this silence, one or more individuals may be led to\n        rise and share a message discerned to be intended for all those\n        gathered. Messages that do arise are not intended to provoke discussion,\n        but further inward reflection. Hence, it is our custom to follow each\n        message with a period of silence.\n      </p>\n      <p>\n        Traditionally, meeting for worship begins when the first worshiper\n        enters the room and begins to settle into the Silence; its conclusion is\n        signaled by a handshake initiated by the meeting coordinator. As a\n        blended meeting, those attending online begin to sign in at 10:45 a.m.,\n        as those attending in person begin to gather. At 11 a.m., all are\n        welcomed into silent worship by a Friend serving as host for that day;\n        the meeting for worship concludes with a brief announcement by the host.\n      </p>\n      <h3>Afterwords</h3>\n      <p>\n        Worship continues with a period called Afterwords, which provides an\n        opportunity for us to build community by sharing messages of a more\n        personal nature: joys, sorrows, and brief reflections that did not rise\n        to the level of being shared during the main portion of worship. We ask\n        that messages be kept brief, and that a worshipful atmosphere be\n        maintained by allowing silence between messages, rather than lapsing\n        into conversation.\n      </p>\n      <h3>Introductions</h3>\n      <p>\n        Following Afterwords, the meeting host will invite members of the\n        Morningside Ministry and Counsel Committee who are present to introduce\n        themselves. As members of the committee charged with the pastoral care\n        of the meeting, they welcome your questions about Quakerism in general\n        and Morningside in particular.\n      </p>\n      <p>\n        At this point, visitors, newcomers, and those who are returning after a\n        prolonged absence will be invited to introduce themselves, in order that\n        they may be greeted more fully during the following time of fellowship.\n      </p>\n      <h3>Announcements</h3>\n      <p>\n        Friends are invited to make announcements about events of interest to\n        the community\n      </p>\n      <h3>Fellowship</h3>\n      <p>\n        Traditionally, all have been welcome to share refreshments and\n        conversation following worship. During the time of pandemic, fellowship\n        may take place as Friends and attenders remain in the online worship\n        room, or as we adjourn to breakout rooms for conversation in small\n        groups.\n      </p>\n    </section>\n  </CoreLayout>\n);\nexport default WorshipPage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\nimport { useLocation } from \"@reach/router\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nconst SEO = ({ title, description, image, article }) => {\n  const { pathname } = useLocation();\n  const { site } = useStaticQuery(query);\n\n  const {\n    defaultTitle,\n    titleTemplate,\n    defaultDescription,\n    siteUrl,\n    defaultImage,\n    twitterUsername,\n  } = site.siteMetadata;\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${pathname}`,\n  };\n\n  return (\n    <Helmet title={seo.title} titleTemplate={titleTemplate}>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\n\n      {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\n\n      {seo.description && (\n        <meta property=\"og:description\" content={seo.description} />\n      )}\n\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\n\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n\n      {twitterUsername && (\n        <meta name=\"twitter:creator\" content={twitterUsername} />\n      )}\n\n      {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n\n      {seo.description && (\n        <meta name=\"twitter:description\" content={seo.description} />\n      )}\n\n      {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n    </Helmet>\n  );\n};\n\nexport default SEO;\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  article: PropTypes.bool,\n};\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  article: false,\n};\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n        # twitterUsername\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport Nav from \"./index\";\n\nconst links = [\n  [\"Morningside\", \"/about\"],\n  [\"Quakers\", \"/quakers\"],\n  [\"Worship\", \"/worship\"],\n  [\"Business\", \"/business\"],\n  [\"Fellowship\", \"/fellowship\"],\n  [\"Library\", \"/library\"],\n];\n\nconst AboutNav = () => <Nav links={links} />;\n\nexport default AboutNav;\n"],"sourceRoot":""}